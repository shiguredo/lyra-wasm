name: release

on:
  push:
    tags:
      - '*'

jobs:
  create-release-draft:
    name: Create GitHub Release Draft
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false

  wasm-build-and-upload:
    name: 'Uplaod wasm files'
    runs-on: ubuntu-latest
    needs: create-release-draft
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: npm
      - run: npm install
      # - run: npm run build
      # - uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release-draft.outputs.upload-url }}
      #     asset_path: wasm/bazel-bin/lyra-wasm/lyra.wasm
      #     asset_name: lyra.wasm
      #     asset_content_type: application/wasm
      # - uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release-draft.outputs.upload-url }}
      #     asset_path: wasm/bazel-bin/lyra-wasm/lyra.worker.js
      #     asset_name: lyra.worker.js
      #     asset_content_type: text/javascript
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-draft.outputs.upload-url }}
          asset_path: README.md
          asset_name: lyra.worker.js
          asset_content_type: text/javascript

  notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs:
      - create-release-draft
      - wasm-build-and-upload
    if: always()
    steps:
      - uses: actions/checkout@v3
      - uses: rtCamp/action-slack-notify@v2
        if: |
          needs.create-release-draft.result == 'failure' ||
          needs.wasm-build-and-upload.result == 'failure'
        env:
          SLACK_CHANNEL: sora-oss
          SLACK_COLOR: danger
          SLACK_TITLE: Failure release
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
